@import "../../../css/vars";
@import "../../../css/typo";

.viewBox {
    width: 100%;
    height: 400px;
    border: 1px solid $color_border;
    border-radius: 1rem;
    background: linear-gradient(to right, transparent 90%, rgba(128, 128, 128, 0.214)),
        linear-gradient(to bottom, transparent 90%, rgba(128, 128, 128, 0.214));
    background-size: 10px 10px;
    background-repeat: repeat-x repeat-y;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    .viewBox__outer {
        display: flex;
        align-items: center;
        justify-content: center;
        position: absolute;
        pointer-events: none;
        perspective: 200px;
        transform-style: preserve-3d;
        &.viewAlt {
            .viewBox__box {
                animation: rot 20s linear infinite;
            }
            .viewBox__small {
                animation: rot 20s linear infinite;
            }
            .viewBox__box_top,
            .viewBox__box_left,
            .viewBox__box_right,
            .viewBox__box_bottom,
            .viewBox__box_front,
            .viewBox__box_back {
                background-color: transparentize($color_black, 0.5);
                animation: rainbow 2s infinite linear;
            }
        }
        // &:hover {
            // .viewBox__box {
                // transform: rotateX(20deg) rotateZ(20deg);
            // }
        // }
    }
    .viewBox__box {
        position: absolute;
        display: flex;
        align-items: center;
        justify-content: center;
        transform-style: preserve-3d;
        transition: .2s;
        &>* {
            @for $i from 1 to 6 {
                &:nth-child(#{$i}){
                    animation-delay: $i / 10 + s
                }
            }
        }
    }
    .viewBox__box_small {
        position: absolute;
        display: flex;
        align-items: center;
        justify-content: center;
        transform-style: preserve-3d;
        animation: rot 18s linear infinite reverse;
        transition: .2s;
        scale: 0.5;
        &>* {
            @for $i from 1 to 6 {
                &:nth-child(#{$i}){
                    animation-delay: $i / 10 + s
                }
            }
        }
    }
    .viewBox__box_top,
    .viewBox__box_left,
    .viewBox__box_right,
    .viewBox__box_bottom,
    .viewBox__box_front,
    .viewBox__box_back {
        position: absolute;
        width: 8rem;
        height: 8rem;
        border: 4px solid white;
        // opacity: 0.6;
    }
    .viewBox__box_top {
        transform: translateY(-4rem) rotateX(90deg);
    }
    .viewBox__box_left {
        transform: translateX(-4rem) rotateY(90deg);
    }
    .viewBox__box_right {
        transform: translateX(4rem) rotateY(-90deg);
    }
    .viewBox__box_bottom {
        transform: translateY(4rem) rotateX(-90deg);
    }
    .viewBox__box_front {
        transform: translateZ(4rem);
    }
    .viewBox__box_back {
        transform: translateZ(-4rem);
    }
    .viewBox__tile {
        background-color: $color_primary;
        width: 10rem;
        height: 10rem;
        border-radius: 2rem;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        box-shadow: 0 0 1rem -0.5rem black;
        transform-style: preserve-3d;
        will-change: transform;
        // overflow: hidden;
        svg {
            position: absolute;
            width: 100%;
            height: 100%;
            transform: translateZ(1rem);
        }
    }
    .viewBox__tileFlare {
        position: absolute;
        width: 16rem;
        height: 16rem;
        background-color: $color_white;
        border-radius: 1rem;
        // background: radial-gradient(white, transparent, transparent);
        // mix-blend-mode: overlay;
        transform: translateZ(-1rem);
    }
}


@keyframes rot {
    0% {
        transform: rotateY(0);
    }
    100% {
        transform: rotateY(360deg) rotateZ(360deg);
    }
}


@keyframes rainbow {
    0% {
        border-color: $color_yellow;
    }
    12.5% {
        border-color: $color_purple;
    }
    25% {
        border-color: $color_green;
    }
    37.5% {
        border-color: $color_yellow;
    }
    50% {
        border-color: cyan;
    }
    62.5% {
        border-color: $color_red;
    }
    75% {
        border-color: $color_primary;
    }
    87.5% {
        border-color: salmon;
    }
    100% {
        border-color: $color_yellow;
    }
}

:global(.faceId) {
    fill: white;
}